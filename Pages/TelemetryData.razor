@page "/telemetrydata"
@inject TelemeryDataService TelemetryDataService

@using kustoreport.Data
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using System.Diagnostics

@using BlazorDateRangePicker
@using System.Globalization;



<h1>Telemetry Data from ADX</h1>

<p>This component demonstrates how to retrieve data from ADX.</p>

<DateRangePicker Culture="@CultureInfo.GetCultureInfo("en-US")"
                 TimePicker="true" TimePicker24Hour="false"
                 DateFormat="@($"{DateFormat} hh:mm tt")" 
                 OnRangeSelect="OnRangeSelect"
                 />

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

@*<div class="text-right">
        <button type="button" class="btn btn-primary" @onclick="() => chart.Clear()">Clear</button>
        <button type="button" class="btn btn-primary" @onclick="() => DeleteScatter()">Pop</button>
        <button type="button" class="btn btn-primary" @onclick="() => AddScatter()">Push</button>
        <button type="button" class="btn btn-primary" @onclick="() => Restyle()">Rename First</button>
        <button type="button" class="btn btn-primary" @onclick="() => PrependData()">Prepend First</button>
        <button type="button" class="btn btn-primary" @onclick="() => ExtendData()">Extend First</button>
        <button type="button" class="btn btn-primary" @onclick="() => PrependWithLimit()">Prepend First (Max. 100)</button>
        <button type="button" class="btn btn-primary" @onclick="() => ExtendWithLimit()">Extend First (Max. 100)</button>
    </div>*@

@if (telemetrydata == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <table class="table">
        <thead>
            <tr>
                <th>Site</th>
                <th>TimeStamp</th>
                <th>Temperature</th>
                <th>Humidity</th>
                <th>Methane</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var telemetrydataitem in telemetrydata)
            {
                <tr>
                    <td>@telemetrydataitem.site</td>
                    <td>@telemetrydataitem.timestamp.ToString()</td>
                    <td>@telemetrydataitem.temperature.ToString()</td>
                    <td>@telemetrydataitem.humidity.ToString()</td>
                    <td>@telemetrydataitem.methane.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddHours(-4);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);
    private string DateFormat => CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;

    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        Title = new Title
        {
            Text = "Scatter"
        },
        YAxis = new List<YAxis>
{
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "Scatter Unit"
                }
            }
        }
    };

    IList<ITrace> data = new List<ITrace>{
        new Scatter
        {
            Name = "Temperature",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>(),
            Y = new List<object>()
        }
    };

    private async Task ExtendData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        //var max = (int?)scatter.X?.Max();
        //var (x, y) = Helper.GenerateData(max + 1 ?? 0, max + 1 + count ?? count);
        var (x, y) = (timeSteps, temperatureData);

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }

    private async Task ExtendWithLimit(int count = 100, int limit = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var (x, y) = (timeSteps, temperatureData);


        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter), limit);
        }
    }

    private async Task PrependWithLimit(int count = 100, int limit = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var (x, y) = (timeSteps, temperatureData);

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.PrependTrace(x, y, data.IndexOf(scatter), limit);
        }
    }

    private async Task PrependData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var (x, y) = (timeSteps, temperatureData);

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.PrependTrace(x, y, data.IndexOf(scatter));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExtendData();
        }
    }

    private async Task Restyle()
    {
        var updateScatterChart = new Scatter
        {
            Name = "Restyled Name"
        };
        await chart.Restyle(updateScatterChart, 0);
    }

    private async Task DeleteScatter()
    {
        await chart.DeleteTrace(0);
    }

    private async Task AddScatter()
    {
        //var (x, y) = Helper.GenerateData(0, 100);
        await chart.AddTrace(new Scatter
        {

            Name = $"ScatterTrace{data.Count + 1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = timeSteps,
            Y = temperatureData
        });
    }


    private List<kustoreport.Data.TelemetryData> telemetrydata;

    static List<object> temperatureData;
    static List<object> humidityData;
    static List<object> methaneData;
    static object[] timeSteps;

    protected override async Task OnInitializedAsync()
    {
        telemetrydata = await TelemetryDataService.GetStormDataAsync(DateTime.Now.AddDays(-1), DateTime.Now);

        timeSteps = telemetrydata.Select(x => x.timestamp as object).ToArray();

        temperatureData = telemetrydata.Select(x => x.temperature as object).ToList();
        humidityData = telemetrydata.Select(x => x.humidity as object).ToList();
        methaneData = telemetrydata.Select(x => x.methane as object).ToList();

    }

    public void OnRangeSelect(DateRange range)
    {
        telemetrydata = TelemetryDataService.GetStormDataAsync(range.Start.UtcDateTime, range.End.UtcDateTime).Result;
        timeSteps = telemetrydata.Select(x => x.timestamp as object).ToArray();
        temperatureData = telemetrydata.Select(x => x.temperature as object).ToList();
        humidityData = telemetrydata.Select(x => x.humidity as object).ToList();
        methaneData = telemetrydata.Select(x => x.methane as object).ToList();
        Console.WriteLine(telemetrydata.Count);

    }
}
